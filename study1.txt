제목수정.

LSM-tree의 

LSM-tree
장점: 
단점:

SSD
장점:
단점:

LSM-tree compaction 과정 논문 여러개 읽기



ACID:
	-atomicity(원자성)
	-consistency(일관성)
	-isolation(은닉)
	-durability(내구성)
BASE:
	-basically available(최대한 읽기쓰기 가능. 일관성은 보장 안함)
	-soft state(일관성 보장 안하므로, 실제 수렴된 상태일 시간이 조금)
	-eventually consistent(조금만 기다리면 언젠가는 일관된 상태를 가질수 있다는 보장)


transaction log: 시스템 crash했을때, ACID 속성을 지키기위해 만들어진 매커니즘.
	-log sequence number(LSN): 한 로그 레코드의 특별한 번호 부여.
	 LSN으로 O(1)만에 로그를 가져올 수 있음. ARIES같은 알고리즘에선 LSN을 오름차순 할당.
	-prev LSN: 이전 로그 레코드의 링크 (linked list로 되어있음)
	-transaction ID number: 로그 레코드에 해당하는 트랜젝션 id번호.(LSN과는 따로)
	-type: 로그 레코드의 타입
	-이외 어떤계기로 로그 레코드가 만들어졌는지 추가적인 정보들.

ARIES: 유명한 데이터베이스 보존 알고리즘
	-write ahead logging(WAL): 어떠한 변경은 먼저 로그에 저장되고, 나중에 로그를 읽고 다시 스토리지에 저장.
	 데이터의 atomicity와 durability를 위해사용.
	 파일시스템에서도 메타데이터에 WAL을 쓴다(journaling)
	-redo: crash되기전 지점까지 재실행, 그 다음의 트랜잭션은 undo.
	-undo: redo할동안의 변경도 로그에 저장해, crash가 repeat할때를 대비하여 반복해서 redo하는걸 막음.



key-value databse: relational database랑은 다름.
	-associative array(map, dictionary) 사용
	-해시테이블 사용하여 모든 레코드 저장.
	-각 레코드마다 각기 다른 필드를 가질 수 있다.(자료형이 따로 정해지지 않음)
	 현대적인 객체지향개념과 더 잘맞아떨어져 상당한 유연성을 제공.
	-선택적 값들이 relational db와는 다르게 placeholder를 넣지 않아도 되기때문에, 메모리 훨씬 덜 사용.
	-처음에는 성능문제 때문에 잘안썼는데, NoSQL이 생기면서 부상.
	-키를 lexicographic(알파벳) 순서로 정렬하면 키의 range(범위)를 쉽게 설정가능.
	

NoSQL: non-relational SQL
	-빅데이터, 리얼타임 웹 어플리케이션에 사용.
	-consistency(일관성) 개나줘버림. BASE 따름.
	-4가지 타입:
		-key-value store: 간단해서, 데이터베이스 말고도 여러 하드웨어에 적용가능.
		-document store: key-document store? xml, yaml, json 
		-graph: graph로 relation을 표시하기 쉬운 곳에 많이 이용됨.
		-wide column: relational같이 테이블을 사용하지만, 동일한 테이블에 column name과 format이
		 일관적이지 않을수있다. 2차원 key-value store?


write amplification: e.g.) 10mb쓰기를 요청했을때, 실제 100mb데이터를 썼다면: 10x write amplification.
	-NAND flash는 write amplification이 크면 수명때문에 오래못사용함.
	-더군다나 ERASE명령어도 write amplification이 크다.
read amplification: e.g.) 10mb읽기를 요청했을때, 실제 100mb데이터를 읽었다면: 10x read amplification.
	-btree에서 internal node가 캐싱이 되어있으면 최대 1번 디스크접근. (캐싱이 read amplification 낮춤)
space amplification: e.g.) 10mb를 DB에 넣었을때, 실제 스토리지에는 100mb데이터가 저장되었다면: 10x space amplification.
>모두 만족할 수 없고 tradeoff가 존재할 것.
	-Btree는 LSMtree보다 read amplification이 적고,
	-LSMtree는 Btree보다 write amplification이 적다.
	


ISAM(indexed sequential access method):
	-value가 index인 tree.
	-index(ssn field)를 가진 레코드들이 모인 페이지
	-연관된 페이지들이 모인 파일.
	-오버플로우는 페이지가 끝에 추가적으로 할당되며 페이지의 마지막 레코드에 연결.

B+ tree:
	-internal node, leaf node 두가지
	-internal node는 복제된 key만 있음(캐싱). 실제 key와 value는 leaf node에 있음.
	-leaf node는 다음 node의 포인터를 가져, sequential access성능이 좋을수 있다.
	
	-write는 삽입할때마다 leaf block을 하나생성(페이지 단위로 동작하다보니)
	-read는 트리의 높이.
	
LSM(log structured merge) tree: transactional log data같이 insert작업이 많은 곳에 유용함.
	-다른 탐색트리와 비슷하게 key-value pair사용.
	-2개 이상의(C0~Ck) 다른 구조체(SSTables: sorted strings table)를 사용함. 구조체마다 해당하는 하드웨어에 최적화됨.
	-C0(메모리에 가까움) -> 합병 -> C1 -> 합병 -> ... -> Ck(디스크에 가까움)
	-C0에서부터 데이터가 추가되며, 할당량이 초과될때 위로 합병을 하며 이동.
	-STCS(size tiered compaction strategy): 합병할때마다 크기가 두배로 뜀.(hierarchical?)
	-LBCS(level based compaction strategy): 레벨로 나누어 하나의 레벨은 정렬된 'run'이다.
	
	-leveling merge policy: 한 레벨에 한개의 sstable. 합병하면 현 레벨에 아무것도 없음.
	-tiering merge policy: 한 레벨에 T개의 sstable이 있음. 정한 크기에 다다르면 합병하여 다음레벨의 sstable중 한개가 됨.
	-레벨의 컴포넌트들이 쌓이면 쌓일수록 read가 느려지므로 빨리 합병해야함.
	
	
	-write는 삽입하고 합병을 하는데 B tree보단 짧음.
	-read는 레벨마다 이차탐색을 해야하므로 레벨이 클수록 훨씬 느림.
	
	
DRAM(memtable?)을 사용하여 LSMtree의 느린 read성능을 보완하는 방식으로 쓴다.
	
https://tikv.github.io/deep-dive-tikv/key-value-engine/B-Tree-vs-Log-Structured-Merge-Tree.html
	

LSMtree를 적용한 하드웨어의 모습:
	-디스크: WAL부분 + SSTABLE부분 + INDEX부분 (SSTABLE, INDEX는 compactor가 작업함)
	-

Bloom filtering이란: 해싱이랑 비슷한 개념이다. 해당 SSTable을 탐색하지 않고 bit array를 참조하여 찾으려는 파일이 그 테이블 내에 존재하는지 바로 알 수 있다.




	